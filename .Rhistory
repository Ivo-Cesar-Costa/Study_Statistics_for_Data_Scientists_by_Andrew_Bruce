update(step_lm, . ~ . -SqFtTotLiving - SqFtFinBasement - Bathrooms)
lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade + PropertyType + ZipGroup,
data = house, na.action = na.omit)
lm(AdjSalePrice ~ SqFtTotLiving*ZipGroup + SqFtLot + Bathrooms +
Bedrooms + BldgGrade + PropertyType, data = house, na.action = na.omit)
house
lm(AdjSalePrice ~ SqFtTotLiving*ZipGroup + SqFtLot + Bathrooms +
Bedrooms + BldgGrade + PropertyType, data = house, na.action = na.omit)
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
any(is.na(house))
house == "Inf"
is.na(house)
house[is.na(house) | house == "Inf"] <- NA
house
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
house[is.na(house) | house == "Inf"] <- NA
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
house_lm <- glm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
as.numeric(house)
?as.numeric
house_98105 <- house[house$ZipCode == 98105,]
lm_98105 <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade, data = house_98105)
lm_98105
lm(AdjSalePrice ~ SqFtTotLiving*ZipGroup + SqFtLot + Bathrooms +
Bedrooms + BldgGrade + PropertyType, data = house, na.action = na.omit)
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house)
lm_98105
rstandard(lm_98105)
sresid <- rstandard(lm_98105)
order(sresid)
idx <- order(sresid)
idx
idx[1]
sresid[idx[1]]
house_98105[idx[1], c('AdjSalePrice','SqFtTotLiving','SqFtLot','Bathrooms',
'Bedrooms','BldgGrade')]
lm_98105
rstandard(lm_98105)
std_resid <- rstandard(lm_98105)
cooks.distance(lm_98105)
cooks_D <- cooks.distance(lm_98105)
hatvalues(lm_98105)
hat_values <- hatvalues(lm_98105)
plot(hat_values, std_resid, cex = 10*sqrt(cooks_D))
abline(h = c(-2.5, 2.5), lty = 2)
df <- data.frame( resid = residuals(lm_98105),
pred = predict(lm_98105))
df
df <- data.frame(resid = residuals(lm_98105),
pred = predict(lm_98105))
ggplot(df, aes(pred, abs(resid)))
ggplot(df, aes(pred, abs(resid))) + geom_point()
ggplot(df, aes(pred, abs(resid))) +
geom_point() +
geom_smooth()
ggplot(df, aes(pred, abs(resid))) +
geom_point() +
geom_smooth()
terms <- predict(lm_98105, type = 'terms')
terms
resid(lm_98105)
resid(lm_98105)
partial_resid <- resid(lm_98105) + terms
partial_resid
house_98105[,'SqFtTotLiving']
terms
terms[,'SqFtTotLiving']
partial_resid
df <- data.frame(SqFtTotLiving = house_98105[,'SqFtTotLiving'],
Terms = terms[,'SqFtTotLiving'],
PartialResid = partial_resid[,'SqFtTotLiving'])
df
options(max.print=20)
df
ggplot(df, aes(SqFtTotLiving, PartialResid))
ggplot(df, aes(SqFtTotLiving, PartialResid)) +
geom_point(shape=1)
ggplot(df, aes(SqFtTotLiving, PartialResid)) +
geom_point(shape=1) + scale_shape(solid=FALSE)
ggplot(df, aes(SqFtTotLiving, PartialResid)) +
geom_point(shape=1) + scale_shape(solid=FALSE) +
geom_smooth(linetype=2)
ggplot(df, aes(SqFtTotLiving, PartialResid)) +
geom_point(shape=1) + scale_shape(solid=FALSE) +
geom_smooth(linetype=2) +
geom_line(aes(SqFtTotLiving. Terms))
ggplot(df, aes(SqFtTotLiving, PartialResid)) +
geom_point(shape=1) + scale_shape(solid=FALSE) +
geom_smooth(linetype=2) +
geom_line(aes(SqFtTotLiving, Terms))
lm(AdjSalePrice ~ poly(SqFtTotLiving, 2) + SqFtLot +
BldgGrade + Bathrooms + Bedrooms,
data = house_98105)
library(splines)
knots <- quatile(house_98105$SqFtTotLiving, p=c(.25, .5, .75))
quatile(house_98105$SqFtTotLiving, p=c(.25, .5, .75))
quantile(house_98105$SqFtTotLiving, p=c(.25, .5, .75))
knots <- quantile(house_98105$SqFtTotLiving, p=c(.25, .5, .75))
lm_spline <- lm(AdjSalePrice ~ bs(SqFtTotLiving, knots = knots, degree=3) +
SqFtLot + Bathrooms + Bedrooms + BldgGrade, data = house_98105)
lm_spline
library(mgcv)
lm_gam <- gam(AdjSalePrice ~ s(SqFtTotLiving) + SqFtLot +
Bathrooms + Bedrooms + BldgGrade, data = house_98105)
house_98105
lm_gam <- gam(AdjSalePrice ~ s(SqFtTotLiving) + SqFtLot +
Bathrooms + Bedrooms + BldgGrade, data = house_98105)
lm_gam
lm(PEFR ~ Exposure, data = lung)
model <- lm(PEFR ~ Exposure, data = lung)
model
house
house_sales
PSDS_PATH <- file.path('C:/Users/Ivo/Downloads/Genius/Estatistica_pratica_para_cientistas_de_dados', 'statistics-for-data-scientists')
house <- read.csv(file.path(PSDS_PATH, 'data', 'house_sales.csv'), sep = ";")
house
head(house[,c("AdjSalePrice","SqFtTotLiving","SqFtLot","Bathrooms",
"Bedrooms","BldgGrade")])
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
fitted <- predict(model)
fitted
resid <- residuals(model)
resid
house <- read.csv(file.path(PSDS_PATH, 'data', 'house_sales.csv'), sep = ";")
head(house[,c("AdjSalePrice","SqFtTotLiving","SqFtLot","Bathrooms",
"Bedrooms","BldgGrade")])
options(max.print=20)
head(house[,c("AdjSalePrice","SqFtTotLiving","SqFtLot","Bathrooms",
"Bedrooms","BldgGrade")])
PSDS_PATH <- file.path('C:/Users/Ivo/Downloads/Genius/Estatistica_pratica_para_cientistas_de_dados', 'statistics-for-data-scientists')
house <- read.csv(file.path(PSDS_PATH, 'data', 'house_sales.csv'), sep = ";")
head(house[,c("AdjSalePrice","SqFtTotLiving","SqFtLot","Bathrooms",
"Bedrooms","BldgGrade")])
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data = house, na.action = na.omit)
house_lm <- lm(AdjSalePrice ~ SqFtTotLiving + SqFtLot + Bathrooms +
Bedrooms + BldgGrade,
data=house, na.action=na.omit)
library(klaR)
loan_data
options(max.print=20)
NaiveBayes(outcome ~ purpose_ + home_ + emp_len_,
data = na.omit(loan_data))
naive_model <- NaiveBayes(outcome ~ purpose_ + home_ + emp_len_,
data = na.omit(loan_data))
naive_model
naive_model$table
new_loan
predict(naive_model, new_loan)
library(MASS)
loan_lda <- lda(outcome ~ borrower_score + payment_inc_ratio,
data = loan3000)
loan_lda
loan_lda$scaling
pred <- predict(loan_lda)
pred
pred$posterior
pred$posterior
loan_lda$scaling
pred <- predict(loan_lda)
head(pred$posterior)
lda_df <- cbind(loan3000, prob_default = pred$posterior[,'default'])
lda_df
pred$posterior
lda_df
lda_df
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default))
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6)
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue')
lda_df0
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue') +
geom_line(data = lda_df0, col = 'green', size = 2, alpha = .8)
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue') +
geom_line(data = lda_df0, col = 'green', linewidth = 2, alpha = .8)
logistic_model
pred <- predict(logistic_model)
pred
summary(pred)
prob <- 1/(1 + exp(-pred))
pred
exp(-pred)
prob <- 1/(1 + exp(-pred))
prob
summary(prob)
summary(logistic_model)
logistic_gam <- gam(outcome ~ s(payment_inc_ratio) + purpose_ +
home_ + emp_len_ + s(borrower_score),
data = loan_data, family = 'binomial')
logistic_gam
terms <- predict(logistic_gam, type='terms')
partial_resid <- resid(logistic_model) + terms
predict(logistic_gam, type='terms')
partial_resid
df <- data.frame(payment_inc_ratio = loan_data[,'payment_inc_ratio'],
terms = terms[,'s(payment_inc_ratio)'],
partial_resid = partial_resid[,'s(payment_inc_ratio)'])
df
terms
terms[,'s(payment_inc_ratio)']
df
df
ggplot(df, aes(x=payment_inc_ratio, y=partial_resid, solid=FALSE))
ggplot(df, aes(x=payment_inc_ratio, y=partial_resid, solid=FALSE)) +
geom_point(shape=46, alpha=.4)
ggplot(df, aes(x=payment_inc_ratio, y=partial_resid, solid=FALSE)) +
geom_point(shape=46, alpha=.4) +
geom_line(aes(x=payment_inc_ratio, y=terms),
color='red', alpha=.5, size=1.5)
ggplot(df, aes(x=payment_inc_ratio, y=partial_resid, solid=FALSE)) +
geom_point(shape=46, alpha=.4) +
geom_line(aes(x=payment_inc_ratio, y=terms),
color='red', alpha=.5, size=1.5) +
labs(v='Partial Residual')
options(max.print=20)
## A Solução Naive
library(klaR)
naive_model <- NaiveBayes(outcome ~ purpose_ + home_ + emp_len_,
data = na.omit(loan_data))
naive_model$table
new_loan
predict(naive_model, new_loan)
library(MASS)
loan_lda <- lda(outcome ~ borrower_score + payment_inc_ratio,
data = loan3000)
loan_lda$scaling
pred <- predict(loan_lda)
head(pred$posterior)
lda_df <- cbind(loan3000, prob_default = pred$posterior[,'default'])
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue') +
geom_line(data = lda_df0, col = 'green', linewidth = 2, alpha = .8)
options(max.print=20)
library(klaR)
naive_model <- NaiveBayes(outcome ~ purpose_ + home_ + emp_len_,
data = na.omit(loan_data))
naive_model
naive_model$table
new_loan
predict(naive_model, new_loan)
library(MASS)
loan_lda <- lda(outcome ~ borrower_score + payment_inc_ratio,
data = loan3000)
loan_lda
loan_lda$scaling
pred <- predict(loan_lda)
head(pred$posterior)
lda_df <- cbind(loan3000, prob_default = pred$posterior[,'default'])
lda_df
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue') +
geom_line(data = lda_df0, col = 'green', linewidth = 2, alpha = .8)
library(ggplot2)
ggplot(data = lda_df,
aes(x = borrower_score, y = payment_inc_ratio, color = prob_default)) +
geom_point(alpha = .6) +
scale_color_gradient2(low = 'white', high = 'blue') +
geom_line(data = lda_df0, col = 'green', linewidth = 2, alpha = .8)
logistic_model
pred <- predict(logistic_model)
summary(pred)
prob <- 1/(1 + exp(-pred))
summary(prob)
summary(logistic_model)
logistic_gam <- gam(outcome ~ s(payment_inc_ratio) + purpose_ +
home_ + emp_len_ + s(borrower_score),
data = loan_data, family = 'binomial')
summary(logistic_model)
library(mgcv)
logistic_gam <- gam(outcome ~ s(payment_inc_ratio) + purpose_ +
home_ + emp_len_ + s(borrower_score),
data = loan_data, family = 'binomial')
logistic_gam
terms <- predict(logistic_gam, type='terms')
partial_resid <- resid(logistic_model) + terms
df <- data.frame(payment_inc_ratio = loan_data[,'payment_inc_ratio'],
terms = terms[,'s(payment_inc_ratio)'],
partial_resid = partial_resid[,'s(payment_inc_ratio)'])
ggplot(df, aes(x=payment_inc_ratio, y=partial_resid, solid=FALSE)) +
geom_point(shape=46, alpha=.4) +
geom_line(aes(x=payment_inc_ratio, y=terms),
color='red', alpha=.5, size=1.5) +
labs(v='Partial Residual')
logistic_gam
train_set
pred <- predict(logistic_gam, newdata = train_set)
pred
pred_y <- as.numeric(pred > 0)
pred_y
train_set$outcome
true_y <- as.numeric(train_set$outcome=='default')
true_y
true_pos <- (true_y==1) & (pred_y==1)
true_neg <- (true_y==0) & (pred_y==0)
false_pos <- (true_y==0) & (pred_y==1)
false_neg <- (true_y==1) & (pred_y==0)
true_pos
true_neg
false_pos
false_neg
conf_mat <- matrix(c(sum(true_pos), sum(false_pos),
sum(false_neg), sum(true_neg)), 2, 2)
conf_mat
colnames(conf_mat)
colnames(conf_mat) <- c('Yhat = 1', 'Yhat = 0')
colnames(conf_mat) <- c('Yhat = 1', 'Yhat = 0')
conf_mat
rownames(conf_mat) <- c('Y = 1', 'Y = 0')
conf_mat
conf_mat[1,1]
conf_mat[1,1]/sum(conf_mat[,1])
conf_mat[1,1]/sum(conf_mat[1,])
conf_mat[2,2]/sum(conf_mat[2,])
idx
pred
order(-pred)
order(-pred)
idx <- order(-pred)
true_y
true_y
true_y[idx]
true_y[idx]==1
true_y==1
recall <- cumsum(true_y[idx]==1)/sum(true_y==1)
recall
sum(true_y==1)
sum(true_y==1)
specificity <- (sum(true_y==0) - cumsum(true_y[idx]==0)/sum(true_y==0))
specificity
specificity <- (sum(true_y==0) - cumsum(true_y[idx]==0))/sum(true_y==0))
specificity <- (sum(true_y==0) - cumsum(true_y[idx]==0))/sum(true_y==0)
specificity
roc_df <- data.frame(recall = recall, specificity = specificity)
roc_df
ggplot(roc_df, aes(x=specificity, y=recall))
ggplot(roc_df, aes(x=specificity, y=recall)) +
geom_line(color='blue')
ggplot(roc_df, aes(x=specificity, y=recall)) +
geom_line(color='blue') +
scale_x_reverse(expand=c(0,0))
ggplot(roc_df, aes(x=specificity, y=recall)) +
geom_line(color='blue') +
scale_x_reverse(expand=c(0,0)) +
scale_y_continuous(expand = c(0,0))
ggplot(roc_df, aes(x=specificity, y=recall)) +
geom_line(color='blue') +
scale_x_reverse(expand=c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
geom_line(data = data.frame(x=(0:100)/100), aes(x=x, y=1-x),
linetype = 'dotted', color = 'red')
(0:100)/100
sum(roc_df$recall[-1]*diff(1 - roc_df$specificity))
roc_df$recall[-1]
roc_df$recall
mean(loan_all_data$outcome == 'default')
mean(loan_data$outcome == 'default')
loan_data
loan_data$outcome
mean(loan_data$outcome == 'default')
full_model <- glm(outcome ~ payment_inc_ratio + purpose +
home_ + emp_len_ + dti + revol_bal + revol_util,
data = train_set, family = 'binomial')
full_model
predict(full_model)
pred <- predict(full_model)
pred
pred
pred > 0
mean(pred > 0)
loan_all_data
loan_data
wt <- ifelse(loan_data$outcome=='default',
1/mean(loan_data$outcome == 'default'), 1)
wt
mean(loan_data$outcome == 'default')
1/mean(loan_data$outcome == 'default')
full_model <- glm(outcome ~ payment_inc_ratio + purpose +
home_ + emp_len_ + dti + revol_bal + revol_util,
data = loan_all_data, weight = wt, family = 'binomial')
full_model <- glm(outcome ~ payment_inc_ratio + purpose +
home_ + emp_len_ + dti + revol_bal + revol_util,
data = loan_data, weight = wt, family = 'binomial')
full_model
pred <- predict(full_model)
pred
pred > 0
mean(pred > 0)
options(max.print=20)
library(FNN)
?knn
loan200
newloan
knn_pred <- knn(train = loan200, test = newloan, cl=outcome200, k = 20)
library(FNN)
knn_pred <- knn(train = loan200, test = newloan, cl=outcome200, k = 20)
knn_pred == 'default'
## Padronização (Normalização, Escores Z)
newloan
knn_pred <- knn(train = loan200, test = newloan, cl=outcome, k = 20)
loan_df <- model.matrix(~ -1 + payment_inc_ratio + dti + revol_bal +
revol_util, data = loan_data)
loan_df
knn_pred <- knn(train = loan_df, test = newloan, cl = outcome, k = 5)
loan_df
newloan
loan_df <- model.matrix(~ -1 + payment_inc_ratio + dti + revol_bal +
revol_util, data = loan_data)
loan_df
knn_pred <- knn(train = loan_df, test = newloan, cl = outcome, k = 5)
loan_df[attr(knn_pred,"nn.index")]
loan_df
scale(loan_df)
loan_std <- scale(loan_df)
knn_pred <- knn(train = loan_std, test = newloan_std, cl = outcome, k = 5)
knn_pred <- knn(train = loan_std, test = newloan_std, cl = outcome, k = 5)
loan_df[attr(knn_pred,"nn.index")]
borrow_df <- model.matrix(~ -1 + dti + revol_bal + revol_util + open_acc +
delinq_2Yrs_zero + pub_rec_zero, data = loan_data)
borrow_df <- model.matrix(~ -1 + dti + revol_bal + revol_util + open_acc +
delinq_2yrs_zero + pub_rec_zero, data = loan_data)
borrow_df
borrow_knn <- knn(borrow_df, test = borrow_df, cl = loan_data[, 'outcome'],
prob = TRUE, k = 10)
prob <- attr(borrow_knn,"prob")
borrow_knn <- knn(borrow_df, test = borrow_df, cl = loan_data[, 'outcome'],
prob = TRUE, k = 10)
borrow_knn
prob <- attr(borrow_knn,"prob")
prob
borrow_feature <- ifelse(borrow_knn=='default', prob, 1 - prob)
borrow_feature
summary(borrow_feature)
library(rpart)
loan_tree <- rpart(outcome ~ borrower_score + payment_inc_ratio,
data = loan_data, control = rpart.control(cp=.005))
loan_tree
plot(loan_tree, uniform=TRUE, margin=.05)
text(loan_tree)
loan_tree
library(randomForest)
rf <- randomForest(outcome ~ borrower_score + payment_inc_ratio,
data = loan3000)
rf
rf
rf$err.rate
rf$err.rate[,'OOB']
rf$ntree
1:rf$ntree
errr_df = data.frame(error_rate = rf$err.rate[,'OOB'],
num_trees = 1:rf$ntree)
errr_df
ggplot(error_df, aes(x=num_trees, y=error_rate))
ggplot(error_df, aes(x=num_trees, y=error_rate)) +
geom_line()
loan_data
pred <- predict(loan_data)
loan_data
predict(loan_data)
predict(loan_data)
loan_lda
pred <- predict(loan_lda)
pred
rf_df <- cbind(loan3000, pred_default = pred[,'default']>.5)
pred
pred[,'default']
loan_lda
pred <- predict(loan_lda)
pred
rf_df <- cbind(loan3000, pred_default = pred[,'default']>.5)
ggplot(data=rf_df, aes(x=borrower_score, y=payment_inc_ratio,
color=pred_defaul, shape=pred_default))
ggplot(data=rf_df, aes(x=borrower_score, y=payment_inc_ratio,
color=pred_default, shape=pred_default))
ggplot(data=rf_df, aes(x=borrower_score, y=payment_inc_ratio,
color=pred_default, shape=pred_default)) +
geom_point(alpha=.6, size=2) +
scale_shape_manual(values=c(46,4))
loan_lda
pred <- predict(loan_lda)
pred
pred[,'default']
pred[,'default']>.5
